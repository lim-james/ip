plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.gradleup.shadow' version '9.1.0'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
  mavenCentral()
}

ext.detectFxPlatform = {
    def os = org.gradle.internal.os.OperatingSystem.current()
    def arch = System.getProperty('os.arch')
    if (os.isMacOsX())    return (arch.contains('aarch64') || arch.contains('arm')) ? 'mac-aarch64' : 'mac'
    if (os.isWindows())   return 'win'
    if (os.isLinux())     return (arch.contains('aarch64') || arch.contains('arm')) ? 'linux-aarch64' : 'linux'
    throw new GradleException("Unsupported OS/arch: ${os}/${arch}")
}


dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.10.0'
}

test {
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'

        showExceptions true
        exceptionFormat 'full'
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

javafx {
    version = '17.0.7'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base'] 
}

checkstyle {
    toolVersion = '10.24.0'
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
    maxWarnings = 0
}

tasks.withType(Checkstyle).configureEach {
    reports {
       xml.required = false
       html.required = true
    }
}     

application {
    mainClass.set('Launcher')
}

def fxPlatform = project.findProperty('javafx.platform') ?: detectFxPlatform()

tasks.named('jar') { enabled = false }

shadowJar {
    archiveBaseName.set('dwight')
    archiveVersion.set('')
    archiveClassifier.set(fxPlatform)
    mergeServiceFiles()
    manifest { attributes 'Main-Class': 'Launcher' }
}

run {
    standardInput = System.in
}
